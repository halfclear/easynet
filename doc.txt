easynet中，除非特别指明，绝大多数函数都只能在事件循环中调用。
使用示例，echo-server:
--------------------------------------------------------------------------
#include <easynet/EventLoop.h>
#include <easynet/TcpServer.h>
#include <easynet/SignalMgr.h>
#include <easynet/TcpConnection.h>
#include <easynet/utils/log.h>

using namespace easynet;

int main(int argc, char* argv[])
{
    Logger::getInstance().setLogLevel(Logger::LOG_LEVEL_INFO);// 设置日志级别
    SignalMgr::enableSignalHandling(); // 启用信号处理
    
    TcpServer tcpServer(12251);  // 监听端口12251
    tcpServer.setReadHandler([&](TcpConnection &tcpConnection){  // 读回调函数
	    Buffer &buffer = tcpConnection.getInputBuffer();  // 获取连接到接收缓冲区
	    tcpConnection.send(buffer.data(), buffer.size()); // 将收到的数据发送给客户端
	    buffer.deleteBegin(buffer.size()); // 删除接收缓冲区中的数据
    });

    tcpServer.setPeerShutdownHandler([&](TcpConnection &tcpConnection){
	    tcpConnection.close();  // 对端已关闭连接	
    });

    tcpServer.start();  // 开启服务
   
    EventLoop loop;
    loop.addSignalHandler(SIGPIPE, [&]{  // 添加SIGPIPE信号处理器
        LOG_INFO("SIGPIPE caught");
    });

    loop.addSignalHandler(SIGINT, [&]{  // 添加SIGINT信号处理器，按ctrl+c退出服务
	    LOG_INFO("to stop server");
	    loop.quit();
    });
	
    loop.loop();       // 主线程进入事件循环
    tcpServer.stop();  // 关闭服务
}
------------------------------------------------------------------------

1 事件驱动机制
EventLoop、Channel、Epoller这3个类构成了easynet的事件驱动机制。EventLoop是事件驱动机制的核心，代表了一个事件循环；Epoller则是对epoll的封装；Channel则描述了一个要被EventLoop监听的通道（文件描述符），可以监听文件描述符上的可读或可写事件。一但文件描述符上触发可读或可写事件，Channel上相应的读回调函数或写回调函数就会被触发。在将一个Channel加入到EventLoop中监听之前，需要设置它的读回调函数或写回调函数。还可以设置Channel的错误回调函数，当监听到错误事件或监听过程中发生错误时会回调该函数。

2 TcpConnection
TcpConnection代表了一条tcp连接。

3 TcpServer
TcpServer描述了一个Tcp服务器，它的功能就是监听并接受连接。一个TcpServer有多个工作线程，可以设置工作线程的数量，默认为一个工作线程。一个工作线程就是一个事件循环。多个工作线程之间为对等关系，即每个工作线程都可以监听连接，并将accept到的连接加入到自身的事件循环中。但同一时刻只有一个工作线程可以监听连接。多个工作线程之间需要争夺对监听套接字的使用，获得使用权的工作线程会将监听套接字添加到自身的事件循环中。工作线程对监听套接字的争取有3种方式：robin、锁争用和令牌环传递：
** round robin:各工作线程依次获得监听套接字。
** 锁争用:加锁成功的工作线程将监听套接字加入到自身的事件循环中
** 令牌环传递:工作线程每accpet一轮后，主动将令牌传递给当前连接最少的工作线程，获得令牌的线程将监听套接字加入到事件循环中。
默认采用令牌环传递方式。

每个工作线程均有一个TcpConnection连接池，每accept一个新的连接，就从连接池中获取一个TcpConnection，当连接关闭后将它归还给连接池。连接池有3个参数：maxSize、coreSize和livingTimeSecs。maxSize是连接池的最大连接数，coreSize就是连接池会缓存的连接的最小数量。当TcpConnection归还给连接池后，连接池并不会立即将它释放。当一个连接归还给连接池后，若超过livingTimeSecs秒还未被使用，当连接池中的连接数量大于coreSize时，就会释放它。

TcpServer具有5个回调函数，可以根据需要设置：
** 新连接回调函数。accpet到新连接后会回调该函数；
** 读回调函数。连接上有数据到达时会回调该函数；
** 写完成回调函数。往连接上send数据，数据发送完毕后会回调该函数；
** 对端关闭（shutdown）回调函数。当对端关闭或者shutdown连接时，会回调该函数。
** 连接断开回调函数。当发现连接已经断开时（比如接收到RST报文）会回调该函数。

分别调用TcpServer的如下5个函数完成上述回调函数的设置：
void setNewTcpConnectionHandler(TcpConnectionHandler &&handler);
void setReadHandler(const TcpConnectionHandler &handler);
void setWriteCompleteHandler(TcpConnectionHandler &&handler);
void setPeerShutdownHandler(TcpConnectionHandler &&handler);
void setDisconnectedHandler(TcpConnectionHandler &&handler);

一个TcpServer可以同时监听多个地址，可以调用addListenAddr方法添加监听地址。

TcpServer另外几个常用的方法如下：
void setWorkerNum(int num);-------------------------------设置工作线程数量
void setTcpWorkerConnectionPoolCoreSize(int size);--------设置连接池核心值
void setTcpWorkerConnectionPoolMaxSize(int size);---------设置连接池最大值
void setTcpWorkerConnectionPoolLivingTime(int secs);------设置连接池中连接生存时间
void setMinAcceptsPerCall(int minAcceptsPerCall);---------每轮事件循环中accept连接的最大数量
void setMaxAcceptsPerCall(int maxAcceptsPerCall);---------每轮事件循环中accept连接的最小数量
void start();---------------------------------------------开启服务
void stop();----------------------------------------------停止服务，线程安全

4 TcpClient
TcpClient描述了一个Tcp客户端，可以使用它来连接到服务器。TcpClient具有6个回调函数，可以根据需要设置：
** 连接建立回调函数。当连接成功时会回调该函数；
** 连接错误回调函数。当连接过程中发生错误时会回调该函数；
** 连接超时回调函数。当连接超时时会回调该函数；
** 读回调函数。连接创建成功后，当连接上有数据到达时会回调该函数；
** 写完成回调函数。往连接上send数据，数据发送完毕后会回调该函数；
** 对端关闭（shutdown）回调函数。当对端关闭或者shutdown连接时，会回调该函数。
** 连接断开回调函数。当发现连接已经断开时（比如接收到RST报文）会回调该函数。

可以调用以下方法来连接到服务器：
void connect(const std::string &dstIp, unsigned short dstPort, int timeoutSecs = 0);
当超时时间timeoutSecs大于0时，在服务器无响应的情况下将尝试重连，第一次重试时间默认为2秒后，下一次的重试时间为上次的1.5倍。将经过timeoutSecs时还没有连接成功，则放弃连接，并调用连接超时回调函数。当timeoutSecs为0时，不会尝试重连。

5 定时器
easynet提供两种定时器，一种是基本定时器，另一种是时间轮定时器。

**基本定时器
调用EventLoop的runAfter和runAt函数可以添加基本定时器：
Timer* runAfter(int64_t afterMillis, TimerHandler &&handler, int64_t intervalMillis = 0)；
Timer* runAt(int64_t whenMillis, const TimerHandler &handler, int64_t intervalMillis = 0)；
调用runAfter添加的定时器会在afterMillis毫秒后超时。而runAt添加的定时器则会在whenMillis时刻发生超时。

**时间轮定时器
首先调用EventLoop类的如下方法获取一个时间轮：
TimeWheel* addTimeWheel(int slots, int64_t intervalMillis);
然后调用时间轮的如下方法添加一个定时器：
Timer* addTimer(int64_t afterMillis, TimerHandler &&handler, int64_t intervalMillis = 0);

这两者都用Timer类来描述，两者对外的接口完全一致：
void cancel();--------------------------------------------------关闭定时器
void restart(int64_t afterMillis, int64_t intervalMillis = 0);--重启定时器
int64_t remainTime();-------------------------------------------获取定时器剩余时间
int64_t getWhen();----------------------------------------------获取定时将在何时超时
int64_t getInterval();------------------------------------------获取定时器定时间隔
bool repeatable();----------------------------------------------是否重复定时器

定时间隔interval大于0的定时器为重复定时器，超时后会自动重启。定时间隔为0的定时器超时后系统会自动删除。
不能调用delete删除定时器，只能调用cancel将其释放。

6 信号处理
easynet提供信号处理功能，可以在某个事件循环中为某个信号添加信号处理器，当进程接收到该信号时，会在事件循环中回调该处理器。当在多个事件循环中为同一个信号添加信号处理器时，当接收到该信号时多个信号处理器将按照添加顺序依次被调用。 对于没有添加信号处理器的信号，则仍然保持系统原有的处理方式。

如果要开启信号处理功能，需要包含SignalMgr.h头文件，在程序开启多线程之前调用如下函数：
SignalMgr::enableSignalHandling();
该函数在一个进程中只能调用一次。

可以调用EventLoop类的addSignalHandler函数添加一个信号处理器：
SignalHandler* addSignalHandler(int sig, SigHandler &&handler);
可以调用SignalHandler类型的close方法关闭该处理器。当某个信号的所有处理器都被关闭时，该信号又将回到系统默认的处理方式。

** Linux中有效的信号值为[SIGHUP(1)，SIGSYS(31)]、[SIGRTMIN(34)，SIGRTMAX(64)]，除此之外的其他值为非法值，为非法信号值设置信号处理函数没有意义。
** 不能为信号SIGKILL（9）、SIGSTOP（19）添加信号处理器，这两个信号不能被阻塞、处理和忽略。
